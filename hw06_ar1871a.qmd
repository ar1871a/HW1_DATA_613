---
title: "Homework Assignment: Sentiment Analysis of Emma -ar1871a"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo       = TRUE, 
                      fig.align  = "center",
                      fig.height = 3, fig.width = 4)
ggplot2::theme_set(ggplot2::theme_bw() + ggplot2::theme(strip.background = ggplot2::element_rect(fill = "white")))
```

**Title**: Exploring Joyful Language in Jane Austen’s *Emma* using Tidytext

### **Instructions**

Complete the following exercises using the appropriate packages in R. Ensure that your solutions are optimized and use functional programming principles where applicable.

1.  Load the necessary libraries.
2.  Answer each question in separate R code chunks.
3.  Provide detailed explanations for your approach.
4.  Submit the rendered HTML file.

#### **Objective**:

Use the **`tidytext`** package and three different **sentiment lexicons** (`nrc`, `afinn`, `bing`) to explore **positive/joyful words** in *Emma* by Jane Austen. You will tokenize the text, apply sentiment filters, visualize frequent sentiment words using `ggplot2`, and create a word cloud.

### **Tasks**:

1.  **Data Preparation**

    -   Load the `austen_books()` dataset from the **`janeaustenr`** package.
    -   Group by book and detect chapter boundaries using regex.
    -   Create `linenumber` and `chapter` columns.

```{r}
library(tidytext)
library(dplyr)
library(janeaustenr)
library(stringr)
austen_books() |>
  head(20)

austen_books() |>
  group_by(book) |>
  mutate(
    linenumber = row_number(),
    chapter = cumsum(str_detect(
      text,
      regex("^chapter [\\divxlc]",
        ignore_case = TRUE
      )
    )),
    .before = text
  ) |>
  ungroup() |>
  select(book, chapter, linenumber, text) ->
orig_books
head(orig_books)
```

1.  **Tokenization**

    -   Use `unnest_tokens()` to tokenize text into individual words.

```{r}
austen_books() %>%
  unnest_tokens(output = word, input = text) ->
tidy_books

head(tidy_books)

```

1.  **Sentiment Analysis**

    -   Filter joy/positive words from **each** of the three sentiment lexicons:

        -   `nrc` (joy)
        -   `afinn` (positive scores ≥ 1)
        -   `bing` (positive)

    -   Join each with *Emma*'s text and:

        -   Count word frequency.
        -   Filter for frequently occurring words (`n > 50`).
        -   Visualize using a **bar chart** (`ggplot2`) and a **word cloud** (`wordcloud`).

```{r}
library(textdata)
library(ggplot2)
library(forcats)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)

#1 

#nrc
get_sentiments("nrc") |>
  filter(sentiment == "joy") ->
nrcjoy

tidy_books |>
  inner_join(nrcjoy, by = "word") |>
  count(word, sort = TRUE)

#Bing
get_sentiments("bing") |>
  filter(sentiment == "positive") |>
  slice_sample(n = 10)

#Afinn
get_sentiments("afinn") |>
  filter(value >= 1) |>
  slice_sample(n = 10)

#2 (Joining each with Emma)

#Emma's text tokenization
emmas_words <- austen_books() |>
  filter(book == "Emma") |>
  unnest_tokens(word, text) |>
  anti_join(stop_words, by = "word")

#BING ANALYSIS

get_sentiments("bing") |> filter(sentiment == "positive") -> emmas_bing

tidy_books |>
  inner_join(emmas_bing, by = "word") |>
  count(word, sort = TRUE) |>
  filter(n > 50) ->
emma_bing_final


#NRC
get_sentiments("nrc") |>
  filter(sentiment == "joy") -> nrcjoy2

tidy_books |>
  inner_join(nrcjoy2, by = "word") |>
  count(word, sort = TRUE) |>
  filter(n > 50) ->
emma_nrc_final

#AFINN
emmas_afinn <- get_sentiments("afinn") |> filter(value >= 1)

tidy_books |>
  inner_join(emmas_afinn, by = "word") |>
  count(word, sort = TRUE) |>
  filter(n > 50) ->
emma_afinn_final

# BING Visualizations

# Bar chart
emma_bing_final %>%
  slice_max(order_by = n, n = 10) %>%
  mutate(word = fct_reorder(word, n)) %>%
  ggplot(aes(word, n)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(y = "Frequency", x = NULL, 
       title = "Emma × Bing (positive) — n > 50")

# Word cloud
bing_word_counts |>
  anti_join(stop_words, by = "word") |>
  count(word) |>
  with(wordcloud(word, n, max.words = 30))


# NRC Visualizations

#Bar Chart

emma_nrc_final %>%
  slice_max(order_by = n, n = 10) %>%
  mutate(word = fct_reorder(word, n)) %>%
  ggplot(aes(word, n)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(y = "Frequency", x = NULL, 
       title = "Emma × NRC (joy) — n > 50")

#Wordcloud

emma_nrc_final |>
  anti_join(stop_words, by = "word") |>
  count(word) |>
  with(wordcloud(word, n, max.words = 30))

#AFINN Visualizations

#Bar Chart

emma_afinn_final %>%
  slice_max(order_by = n, n = 10) %>%
  mutate(word = fct_reorder(word, n)) %>%
  ggplot(aes(word, n)) +
  geom_col(fill = "steelblue") +
  coord_flip() +
  labs(y = "Frequency", x = NULL, 
       title = "Emma × AFINN (value ≥ 1) — n >= 50")

emma_afinn_final |>
  anti_join(stop_words, by = "word") |>
  count(word) |>
  with(wordcloud(word, n, max.words = 30))



```

1.  **Push to GitHub**

    -   Push your complete R script (`.R` file) to a **GitHub repository**.

    -   Your script should include:

        -   Data wrangling
        -   Sentiment filtering and joins
        -   Visualization code

    -   You must include **at least 5 meaningful commits** to document your workflow.

------------------------------------------------------------------------

## **Rubric 100 Points**

| Category                                       | Points  |
|------------------------------------------------|---------|
| Step 1: Data wrangling (linenumber, chapter)   | 10      |
| Step 2: Tokenization                           | 10      |
| Step 3a: NRC sentiment analysis + plots        | 10      |
| Step 3b: AFINN sentiment analysis + plots      | 10      |
| Step 3c: BING sentiment analysis + plots       | 10      |
| Code readability, structure, and comments      | 10      |
| Word cloud for each lexicon                    | 20      |
| GitHub submission                              |         |
| Commit history (at least 5 meaningful commits) | 20      |
| **Total**                                      | **100** |

Good Luck!
